/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Follett Content
 * Environment: Production
 * Id: 0537e98b-379f-0050-5134-9e8d9c775098
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { BookAudienceTaxonomyTermCodenames, BookAudienceTaxonomyCodename } from '../taxonomies/book-audience-taxonomy.generated.js';
import type { BookClassificationTaxonomyTermCodenames, BookClassificationTaxonomyCodename } from '../taxonomies/book-classification-taxonomy.generated.js';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Book' type
*/
            export type BookTypeCodename = keyof Pick<Record<TypeCodenames, null>, "book">;

            /*
* Typeguard for codename of 'Book' type
*/
            export function isBookTypeCodename(value: string | undefined | null): value is BookTypeCodename {
                return typeof value === 'string' && value === ('book' satisfies BookTypeCodename);
            }

/*
    * Book
    *
    * Id: 1aff6769-f7fc-43ea-b606-faf9f6ac05f2
* Codename: book
    */
export type BookType = IContentItem<
{
/*
    * Title
    *
    * Codename: title
* Id: 1122e992-ccc2-4b8f-845b-f51e45dbc7a5
* Type: text
* Required: true
    */
                readonly title: Elements.TextElement;

/*
    * Author
    *
    * Codename: author
* Id: ce6e574a-e6fb-402a-a3d6-a54da9cd9062
* Type: text
* Required: true
    */
                readonly author: Elements.TextElement;

/*
    * Book Overview
    *
    * Codename: book_overview
* Id: 6b858afa-8c3e-4875-839c-b7b8d8dec8a4
* Type: text
* Required: false
* Guidelines: This should 1-2 sentences covering the book
    */
                readonly book_overview: Elements.TextElement;

/*
    * Description
    *
    * Codename: description
* Id: 1c9022fc-9c46-4fbf-9f47-a47a22e9f796
* Type: rich_text
* Required: false
    */
                readonly description: Elements.RichTextElement<CoreType>;

/*
    * Cover
    *
    * Codename: cover
* Id: 582ad4cc-8ffd-40b2-907b-852e20c267a7
* Type: asset
* Required: false
    */
                readonly cover: Elements.AssetsElement;

/*
    * Page Count
    *
    * Codename: page_count
* Id: 7bc01994-9b7f-4dd7-81ec-0019209c3ab5
* Type: number
* Required: false
    */
                readonly page_count: Elements.NumberElement;

/*
    * Book Audience
    *
    * Codename: book_audience
* Id: b7e8c951-e00a-44a2-b6fa-957004781acb
* Type: taxonomy
* Required: false
* Taxonomy: book_audience
    */
                readonly book_audience: Elements.TaxonomyElement<BookAudienceTaxonomyTermCodenames, BookAudienceTaxonomyCodename>;

/*
    * Book Classification
    *
    * Codename: book_classification
* Id: 109d78c1-3a5c-456b-a328-366597d140dd
* Type: taxonomy
* Required: false
* Taxonomy: book_classification
    */
                readonly book_classification: Elements.TaxonomyElement<BookClassificationTaxonomyTermCodenames, BookClassificationTaxonomyCodename>;

/*
    * Publisher
    *
    * Codename: publisher
* Id: 80840ba5-cc14-4149-8745-4bf9053b5fdd
* Type: text
* Required: false
    */
                readonly publisher: Elements.TextElement;

/*
    * Format
    *
    * Codename: format
* Id: cb83bfaf-6177-4958-a8a4-93bd07480ca4
* Type: multiple_choice
* Required: false
    */
                readonly format: Elements.MultipleChoiceElement<BookTypeFormatMultipleChoiceOptions>;}, 
BookTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Book
*/
export type BookTypeElementCodenames = 'title' | 'author' | 'book_overview' | 'description' | 'cover' | 'page_count' | 'book_audience' | 'book_classification' | 'publisher' | 'format';;

/*
    * Type guard for Book
    *
    * Id: 1aff6769-f7fc-43ea-b606-faf9f6ac05f2
* Codename: book
    */
export function isBookType(item: IContentItem | undefined | null): item is BookType {
                return item?.system.type === ('book' satisfies BookTypeCodename);
            };

export type BookTypeFormatMultipleChoiceOptions = 'hardcover' | 'paperback' | 'ebook'

            